import streamlit as st
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Perfil Acad√™mico", layout="centered")
st.title("üîç Descubra seu perfil Acad√™mico")
st.write("Responda √†s perguntas abaixo e descubra em qual grupo voc√™ se encaixa usando Machine Learning!")

# Dados das perguntas (organizados em dicion√°rio para facilitar manuten√ß√£o)
perguntas = {
    "Pergunta 1": ("Reda√ß√£o", "Problema de matem√°tica"),
    "Pergunta 2": ("Hist√≥ria", "F√≠sica"),
    "Pergunta 3": ("Pessoas", "Tecnologia"),
    "Pergunta 4": ("Interpretar textos", "C√°lculos"),
    "Pergunta 5": ("Pol√≠tica", "Engenharia")
}

# Coleta de respostas
respostas = []
for pergunta, (opcao1, opcao2) in perguntas.items():
    st.write(f"**{pergunta}**")
    escolha = st.radio("", [opcao1, opcao2], key=pergunta)
    respostas.append(0 if escolha == opcao1 else 1)

if st.button("üîé Ver resultado"):
    X_novo = np.array(respostas).reshape(1, -1)

    # Dados de treino simulados (com mais varia√ß√£o)
    grupo_humanas = np.array([
        [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0],
        [1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 1, 0, 1, 0]  # Adicionei alunos "mistos"
    ])
    grupo_exatas = np.array([
        [1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [1, 0, 1, 1, 1],
        [0, 1, 1, 1, 1], [1, 1, 0, 1, 1], [1, 0, 1, 0, 1]
    ])
    X_treino = np.vstack((grupo_humanas, grupo_exatas))
    y_treino = np.array([0] * len(grupo_humanas) + [1] * len(grupo_exatas))  # 0=Humanas, 1=Exatas

    # K-means
    kmeans = KMeans(n_clusters=2, random_state=42, n_init=10)
    kmeans.fit(X_treino)

    # Mapeamento dos clusters para os r√≥tulos reais (baseado nos dados de treino)
    rotulos = ["Humanas", "Exatas"]
    cluster_para_rotulo = {
        0: rotulos[y_treino[kmeans.labels_ == 0][0]],  # Pega o r√≥tulo majorit√°rio no cluster 0
        1: rotulos[y_treino[kmeans.labels_ == 1][0]]   # Pega o r√≥tulo majorit√°rio no cluster 1
    }
    perfil = cluster_para_rotulo[kmeans.predict(X_novo)[0]]

    # Silhouette Score (qualidade do agrupamento)
    score = silhouette_score(X_treino, kmeans.labels_)
    
    # Visualiza√ß√£o com PCA
    X_vis = np.vstack((X_treino, X_novo))
    pca = PCA(n_components=2)
    X_2d = pca.fit_transform(X_vis)

    # Cores e marcadores
    cores = ["blue", "red"]
    marcadores = ["o", "s"]  # C√≠rculo para Humanas, Quadrado para Exatas

    fig, ax = plt.subplots(figsize=(8, 6))
    
    # Plot dos dados de treino
    for i in range(len(X_treino)):
        cluster = kmeans.labels_[i]
        ax.scatter(
            X_2d[i, 0], X_2d[i, 1],
            marker=marcadores[cluster],
            color=cores[cluster],
            alpha=0.6,
            label=f"{rotulos[y_treino[i]]} (Treino)" if i == 0 else ""
        )

    # Plot do novo aluno (destaque)
    ax.scatter(
        X_2d[-1, 0], X_2d[-1, 1],
        marker="*",  # Estrela para o usu√°rio
        color="green",
        s=200,
        edgecolor="black",
        label="Voc√™"
    )

    # Configura√ß√µes do gr√°fico
    ax.set_title("Agrupamento de Perfis Acad√™micos (K-means + PCA)", pad=20)
    ax.set_xlabel("Componente Principal 1")
    ax.set_ylabel("Componente Principal 2")
    ax.grid(True, linestyle="--", alpha=0.3)
    ax.legend(loc="upper right")

    # Exibi√ß√£o dos resultados
    st.pyplot(fig)
    st.success(f"**Seu perfil √©:** {perfil} üéØ")
    
    if perfil == "Humanas":
        st.info("""
        Voc√™ foi agrupado com alunos que preferem **comunica√ß√£o, interpreta√ß√£o e temas sociais**.  
        Caracter√≠sticas t√≠picas:  
        - Habilidade em escrita e an√°lise cr√≠tica  
        - Interesse em humanidades e artes  
        """)
    else:
        st.info("""
        Voc√™ foi agrupado com alunos que preferem **l√≥gica, c√°lculo e pensamento anal√≠tico**.  
        Caracter√≠sticas t√≠picas:  
        - Racioc√≠nio quantitativo  
        - Aptid√£o para ci√™ncias exatas e tecnologia  
        """)
    
    st.metric("Qualidade do Agrupamento (Silhouette Score)", f"{score:.2f}",
              help="Valores pr√≥ximos de 1 indicam clusters bem definidos")

    # Explica√ß√£o t√©cnica (opcional)
    with st.expander("‚ÑπÔ∏è Como funciona?"):
        st.markdown("""
        - **K-means**: Algoritmo de Machine Learning que agrupa dados similares.  
        - **PCA**: Reduz a dimensionalidade para visualiza√ß√£o em 2D.  
        - **Silhouette Score**: Mede qu√£o bem cada ponto se encaixa no seu cluster.  
        """)
