import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
from sklearn.decomposition import PCA

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Perfil Acad√™mico", layout="centered")
st.title("üîç Descubra seu perfil Acad√™mico")

# Vari√°veis de sess√£o
if 'etapa' not in st.session_state:
    st.session_state.etapa = 1
    st.session_state.perfil = None
    st.session_state.respostas = None
    st.session_state.segunda_etapa_respostas = None

# --- PRIMEIRA ETAPA ---
if st.session_state.etapa == 1:
    st.write("**Parte 1/2:** Marque os conte√∫dos com que voc√™ mais se identifica:")
    
    itens = [
        {"texto": "Escrever poemas ou cr√¥nicas", "valor": 0},
        {"texto": "Resolver desafios de programa√ß√£o", "valor": 1},
        {"texto": "Debater sobre filosofia/sociologia", "valor": 0},
        {"texto": "Projetar experimentos cient√≠ficos", "valor": 1},
        {"texto": "Analisar obras de arte", "valor": 0},
        {"texto": "Desenvolver f√≥rmulas matem√°ticas", "valor": 1},
        {"texto": "Ler sobre pol√≠tica internacional", "valor": 0},
        {"texto": "Estudar novas tecnologias", "valor": 1},
        {"texto": "Interpretar textos liter√°rios", "valor": 0},
        {"texto": "Trabalhar com c√°lculos complexos", "valor": 1}
    ]
    
    respostas = [0] * len(itens)
    for i, item in enumerate(itens):
        if st.checkbox(item["texto"], key=f"item_{i}"):
            respostas[i] = 1

    if st.button("üîé Avan√ßar para a Parte 2"):
        if sum(respostas) < 3:
            st.warning("Selecione pelo menos 3 conte√∫dos!")
        else:
            st.session_state.respostas = respostas
            st.session_state.etapa = 2
            st.session_state.segunda_etapa_respostas = [False] * 12  # 12 caracter√≠sticas
            st.rerun()

# --- SEGUNDA ETAPA ---
elif st.session_state.etapa == 2:
    # Classifica√ß√£o inicial (Humanas/Exatas)
    perfil = "Humanas" if sum(st.session_state.respostas) < 5 else "Exatas"
    st.session_state.perfil = perfil

    st.success(f"Perfil principal: **{perfil}**")
    st.divider()
    st.subheader("üìå **Parte 2/2:** Selecione as caracter√≠sticas que mais combinam com voc√™")
    
    # Caracter√≠sticas por √°rea (12 op√ß√µes) - Defini√ß√µes mais espec√≠ficas
    caracteristicas = {
        "Exatas": [
            "üìä Criar modelos estat√≠sticos complexos",
            "üßÆ Desenvolver teorias matem√°ticas abstratas",
            "‚ö° Projetar circuitos el√©tricos complexos",
            "üèóÔ∏è Calcular estruturas de concreto armado",
            "üíª Desenvolver algoritmos de IA",
            "üìà Analisar tend√™ncias de mercado",
            "üî¢ Resolver equa√ß√µes diferenciais",
            "üìê Projetar sistemas mec√¢nicos",
            "üåê Otimizar redes de computadores",
            "üß™ Simular experimentos f√≠sicos",
            "ü§ñ Programar rob√¥s aut√¥nomos",
            "üìâ Visualizar dados multivariados"
        ],
        "Humanas": [
            "‚öñÔ∏è Argumentar casos jur√≠dicos complexos",
            "üìú Analisar fontes hist√≥ricas prim√°rias",
            "üìñ Escrever cr√≠tica liter√°ria",
            "üß† Aplicar testes psicol√≥gicos",
            "üó£Ô∏è Mediar conflitos organizacionais",
            "üé® Criar exposi√ß√µes art√≠sticas",
            "üåç Estudar antropologia cultural",
            "‚úçÔ∏è Produzir textos acad√™micos",
            "üèõÔ∏è Interpretar artefatos arqueol√≥gicos",
            "üë• Conduzir terapia de grupo",
            "üí¨ Desenvolver discursos persuasivos",
            "üìù Elaborar pareceres t√©cnicos"
        ]
    }[perfil]

    # Atualizar sele√ß√µes mantendo estado
    cols = st.columns(2)
    selecoes = []
    for i, carac in enumerate(caracteristicas):
        with cols[i % 2]:
            checked = st.checkbox(carac, key=f"carac_{i}", 
                                value=st.session_state.segunda_etapa_respostas[i])
            st.session_state.segunda_etapa_respostas[i] = checked
            if checked:
                selecoes.append(carac)

    if st.button("üéØ Descobrir meu curso ideal"):
        if len(selecoes) != 5:
            st.warning("Selecione exatamente 5 caracter√≠sticas!")
        else:
            # Mapeamento curso-caracter√≠sticas (mais espec√≠fico)
            cursos_map = {
                "Exatas": {
                    "Estat√≠stica": [0, 5, 11],
                    "Matem√°tica": [1, 6],
                    "Engenharia El√©trica": [2],
                    "Engenharia Civil": [3],
                    "Ci√™ncia da Computa√ß√£o": [4, 8],
                    "Engenharia Mec√¢nica": [7],
                    "Engenharia de Controle": [10]
                },
                "Humanas": {
                    "Direito": [0, 11],
                    "Hist√≥ria": [1, 8],
                    "Letras": [2, 7],
                    "Psicologia": [3, 9],
                    "Artes": [5],
                    "Antropologia": [6],
                    "Comunica√ß√£o": [10]
                }
            }[perfil]
            
            # Calcular pontua√ß√£o para cada curso
            scores = {}
            for curso, idx_caracs in cursos_map.items():
                score = sum(1 for idx in idx_caracs 
                           if caracteristicas[idx] in selecoes)
                scores[curso] = score
            
            # Curso ideal √© o com maior pontua√ß√£o
            curso_ideal = max(scores.items(), key=lambda x: x[1])[0]
            
            # --- VISUALIZA√á√ÉO ---
            # Gerar pontos para os cursos (3 por curso)
            pontos_curso = {}
            for curso in cursos_map.keys():
                base_pos = list(cursos_map.keys()).index(curso)
                pontos_curso[curso] = np.column_stack([
                    np.random.normal(base_pos, 0.1, size=3),
                    np.random.normal(0, 0.1, size=3)
                ])
            
            # Posi√ß√£o do usu√°rio (pr√≥xima ao curso ideal)
            user_pos = np.mean(pontos_curso[curso_ideal], axis=0) + np.array([0, 0.2])
            
            # Gr√°fico
            fig, ax = plt.subplots(figsize=(10, 6))
            cores = plt.cm.tab10.colors
            
            for i, (curso, pontos) in enumerate(pontos_curso.items()):
                ax.scatter(
                    pontos[:, 0], pontos[:, 1],
                    color=cores[i],
                    s=100,
                    label=f"{curso} ({scores[curso]})",
                    alpha=0.7
                )
            
            ax.scatter(
                user_pos[0], user_pos[1],
                color=cores[list(cursos_map.keys()).index(curso_ideal)],
                marker="*",
                s=300,
                edgecolor="black",
                label=f"Voc√™ ‚Üí {curso_ideal}"
            )
            
            ax.set_title("Sua Proximidade com os Cursos", pad=20)
            ax.set_xticks(range(len(cursos_map)))
            ax.set_xticklabels(cursos_map.keys(), rotation=45)
            ax.set_yticks([])
            ax.legend(bbox_to_anchor=(1.05, 1))
            ax.grid(True, linestyle="--", alpha=0.3)
            
            st.pyplot(fig)
            
            # Resultado Final
            st.balloons()
            emoji_curso = {
                "Estat√≠stica": "üìä", "Matem√°tica": "üßÆ", 
                "Engenharia El√©trica": "‚ö°", "Engenharia Civil": "üèóÔ∏è",
                "Ci√™ncia da Computa√ß√£o": "üíª", "Engenharia Mec√¢nica": "‚öôÔ∏è",
                "Engenharia de Controle": "ü§ñ", "Direito": "‚öñÔ∏è",
                "Hist√≥ria": "üèõÔ∏è", "Letras": "üìñ", "Psicologia": "üß†",
                "Artes": "üé®", "Antropologia": "üåç", "Comunica√ß√£o": "üí¨"
            }.get(curso_ideal, "üéì")
            
            st.success(f"""
            **Resultado Final:**
            
            üéØ **Voc√™ tem perfil de {perfil}** e se encaixa melhor em:
            {emoji_curso} **{curso_ideal}**
            
            **Caracter√≠sticas selecionadas que mais combinam:**
            """)
            
            # Corrigindo a lista de caracter√≠sticas correspondentes
            caracs_correspondentes = [
                carac for carac in selecoes 
                if any(carac == caracteristicas[idx] for idx in cursos_map[curso_ideal])
            ]
            
            for carac in caracs_correspondentes:
                st.write(f"- {carac}")

    if st.button("‚Ü©Ô∏è Voltar para a Parte 1"):
        st.session_state.etapa = 1
        st.rerun()   
